{
	"Create Use Case": {
		"scope": "c#,csharp",
		"prefix": "new-usecase-class",
		"body": [
			"using Application.Common.Messages;",
			"using Application.Common.UseCases;",
			"using Domain.Orders;",
			"using FluentValidation;",
			"using MediatR;",
			"using Microsoft.Extensions.DependencyInjection;",
			"",
			"namespace Application.$1;",
			"",
			"public sealed class $2(IServiceProvider serviceProvider) : BaseInOutUseCase<$3, $4, $5>(",
				"serviceProvider,",
				"serviceProvider.GetService<IValidator<$3>>()",
			"), IRequestHandler<$3, BaseResponse<$4>>",
			"{",
				"public override async Task<BaseResponse<$4>> HandleInternalAsync(",
					"$3 request,",
					"CancellationToken cancellationToken",
				")",
				"{",
				"    var response = new BaseResponse<$4>();",
				"",
				"    response.SetData(null);",
				"",
				"    logger.Information(\"Use case was executed with success\", response);",
				"",
				"    return response;",
				"}",
			"}"
		],
		"description": "Create a new use case class"
	},
	"Create Use Case Unit Tests": {
		"scope": "c#,csharp",
		"prefix": "new-usecase-test-class",
		"body": [
			"using Application.Common.Messages;",
			"using Application.$3;",

			"namespace UnitTests.Application.$2;",

			"public sealed class $1Test : IClassFixture<$1Fixture>",
			"{",
			"    private readonly $1Fixture _fixture;",
			"    public $1Test($1Fixture fixture)",
			"    {",
			"        _fixture = fixture;",
			"        _fixture.ClearInvocations();",
			"    }",
			"",
			"    [Fact]",
			"    public async Task GivenAValidRequestThenPass()",
			"    {",
			"        // Arrange",
			"        var request = _fixture.SetValidRequest();",
			"        _fixture.SetSuccessfulValidator(request);",
			"        _fixture.SetSuccessfulRepository();",
			"",
			"        // Act",
			"        var result = await _fixture.useCase.Handle(",
			"            request,",
			"            _fixture.cancellationToken",
			"        );",
			"",
			"        // Assert",
			"        result.Data.Should().NotBeNull();",
			"        result.Success.Should().BeTrue();",
			"        result.Message.Should().BeNullOrEmpty();",
			"",
			"        _fixture.VerifyLoggerInformation<BaseResponse<$4>>(1);",
			"        _fixture.VerifyRepository(1);",
			"        _fixture.VerifyLoggerError<$3>(0);",
			"}"
		],
		"description": "Create unit tests for a new use case class"
	},
	"Create Unit Test Method": {
		"scope": "c#,csharp",
		"prefix": "new-test-method",
		"body": [
			"[Fact]",
			"public async Task $1()",
			"{",
			"    // Arrange",
			"    $2",
			"",
			"    // Act",
			"    $3",
			"",
			"    // Assert",
			"    $4",
			"}"
		],
		"description": "Create unit tests for a new use case class"
	}
}