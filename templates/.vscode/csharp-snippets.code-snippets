{
	"Create Use Case Class": {
		"scope": "c#,csharp",
		"prefix": "hst-new-usecase-class",
		"body": [
			"using Application.Common.Messages;",
			"using Application.Common.UseCases;",
			"using Domain.$3;",
			"using FluentValidation;",
			"using Microsoft.Extensions.DependencyInjection;",
			"",
			"namespace Application.$1;",
			"",
			"public sealed record $2Request(Guid CorrelationId, int Id) : BaseRequest(CorrelationId);",
			"",
			"public sealed class $2RequestValidator : AbstractValidator<$2Request>",
			"{",
			"    public $2RequestValidator()",
			"    {",
			"        RuleFor(r => r.Id).NotEmpty();",
			"    }",
			"}",
			"",
			"public sealed class $2UseCase(IServiceProvider serviceProvider) : BaseInOutUseCase<$2Request, $3Dto, $3>(",
			"   serviceProvider,",
			"   serviceProvider.GetService<IValidator<$2Request>>()",
			")",
			"{",
			"    private const string ClassName = nameof($2UseCase);",
			"",
			"    public override async Task<BaseResponse<$3Dto>> HandleInternalAsync(",
			"        $2Request request,",
			"        CancellationToken cancellationToken",
			"    )",
			"    {",
			"        string methodName = nameof(HandleInternalAsync);",
			"        var response = new BaseResponse<$3Dto>();",
			"",
			"        response.SetData(null);",
			"",
			"        logger.Information(\"[{ClassName}] | [{MethodName}] | [{CorrelationId}] | Use case was executed with success\", ClassName, methodName, request.CorrelationId);",
			"",
			"        return response;",
			"    }",
			"}",
		],
		"description": "Create a new use case class"
	},
	"Create Use Case Unit Tests Class": {
		"scope": "c#,csharp",
		"prefix": "hst-new-usecase-test-class",
		"body": [
			"using Application.Common.Messages;",
			"using Application.$3;",

			"namespace UnitTests.Application.$2;",

			"public sealed class $1Test : IClassFixture<$1Fixture>",
			"{",
			"    private readonly $1Fixture _fixture;",
			"    public $1Test($1Fixture fixture)",
			"    {",
			"        _fixture = fixture;",
			"        _fixture.ClearInvocations();",
			"    }",
			"",
			"    [Fact]",
			"    public async Task GivenAValidRequestThenPass()",
			"    {",
			"        // Arrange",
			"        var request = _fixture.SetValidRequest();",
			"        _fixture.SetSuccessfulValidator(request);",
			"        _fixture.SetSuccessfulRepository();",
			"",
			"        // Act",
			"        var result = await _fixture.useCase.Handle(",
			"            request,",
			"            _fixture.cancellationToken",
			"        );",
			"",
			"        // Assert",
			"        Assert.NotNull(result.Data);",
			"        Assert.False(result.Success);",
			"        Assert.NotEmpty(result.Message);",
			"",
			"        _fixture.VerifyLoggerInformation<BaseResponse<$4>>(1);",
			"        _fixture.VerifyRepository(1);",
			"        _fixture.VerifyLoggerError<$3>(0);",
			"}"
		],
		"description": "Create unit tests for a new use case class"
	},
	"Create Use Case Unit Tests Class Fixture": {
		"scope": "c#,csharp",
		"prefix": "hst-new-usecase-test-class-fixture",
		"body": [
			"using Domain.Common;",
			"using UnitTests.Application.Common;",
			"",
			"namespace UnitTests.Application.$1;",
			"",
			"public class $2Fixture : BaseApplicationFixture<$3, $4>",
			"{",
			"    private readonly Mock<IServiceProvider> mockServiceProvider;",
			"    public $2 useCase;",
			"",
			"    public $2Fixture()",
			"    {",
			"        MockServiceProviderServices();",
			"        useCase = new(mockServiceProvider.Object);",
			"    }",
			"",
			"    public new void ClearInvocations()",
			"    {",
			"        base.ClearInvocations();",
			"    }",
			"    public $4 SetValidRequest() => new $4();",
			"",
			"    public void SetSuccessfulRepository()",
			"    {",
			"        $5",
			"    }",
			"}"
		],
		"description": "Create unit tests for a new use case class fixture"
	},
	"Create Unit Test Method": {
		"scope": "c#,csharp",
		"prefix": "hst-new-test-method",
		"body": [
			"[Fact]",
			"public async Task $1()",
			"{",
			"    // Arrange",
			"    $2",
			"",
			"    // Act",
			"    $3",
			"",
			"    // Assert",
			"    $4",
			"}"
		],
		"description": "Create unit tests for a new use case class"
	}
}